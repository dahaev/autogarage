// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: magazins.sql

package db

import (
	"context"
)

const createMagazine = `-- name: CreateMagazine :one
INSERT INTO magazines (
    address
) VALUES (
             $1
         )
    RETURNING id, address
`

func (q *Queries) CreateMagazine(ctx context.Context, address string) (Magazine, error) {
	row := q.db.QueryRowContext(ctx, createMagazine, address)
	var i Magazine
	err := row.Scan(&i.ID, &i.Address)
	return i, err
}

const getMagazine = `-- name: GetMagazine :one
SELECT id, address FROM magazines
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetMagazine(ctx context.Context, id int64) (Magazine, error) {
	row := q.db.QueryRowContext(ctx, getMagazine, id)
	var i Magazine
	err := row.Scan(&i.ID, &i.Address)
	return i, err
}

const listMagazines = `-- name: ListMagazines :many
SELECT id, address FROM magazines
ORDER BY id
    LIMIT $1
OFFSET $2
`

type ListMagazinesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListMagazines(ctx context.Context, arg ListMagazinesParams) ([]Magazine, error) {
	rows, err := q.db.QueryContext(ctx, listMagazines, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Magazine
	for rows.Next() {
		var i Magazine
		if err := rows.Scan(&i.ID, &i.Address); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMagazine = `-- name: UpdateMagazine :one
UPDATE magazines
set address = $2
WHERE id=$1
    RETURNING id, address
`

type UpdateMagazineParams struct {
	ID      int64  `json:"id"`
	Address string `json:"address"`
}

func (q *Queries) UpdateMagazine(ctx context.Context, arg UpdateMagazineParams) (Magazine, error) {
	row := q.db.QueryRowContext(ctx, updateMagazine, arg.ID, arg.Address)
	var i Magazine
	err := row.Scan(&i.ID, &i.Address)
	return i, err
}
