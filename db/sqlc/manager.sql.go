// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: manager.sql

package db

import (
	"context"
)

const createManager = `-- name: CreateManager :one
INSERT INTO managers (
    name,
    town
) VALUES (
             $1, $2
         )
    RETURNING id, name, town
`

type CreateManagerParams struct {
	Name string `json:"name"`
	Town string `json:"town"`
}

func (q *Queries) CreateManager(ctx context.Context, arg CreateManagerParams) (Manager, error) {
	row := q.db.QueryRowContext(ctx, createManager, arg.Name, arg.Town)
	var i Manager
	err := row.Scan(&i.ID, &i.Name, &i.Town)
	return i, err
}

const getManager = `-- name: GetManager :one
SELECT id, name, town FROM managers
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetManager(ctx context.Context, id int64) (Manager, error) {
	row := q.db.QueryRowContext(ctx, getManager, id)
	var i Manager
	err := row.Scan(&i.ID, &i.Name, &i.Town)
	return i, err
}

const listManagers = `-- name: ListManagers :many
SELECT id, name, town FROM managers
ORDER BY id
    LIMIT $1
OFFSET $2
`

type ListManagersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListManagers(ctx context.Context, arg ListManagersParams) ([]Manager, error) {
	rows, err := q.db.QueryContext(ctx, listManagers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Manager
	for rows.Next() {
		var i Manager
		if err := rows.Scan(&i.ID, &i.Name, &i.Town); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateManager = `-- name: UpdateManager :one
UPDATE managers
set name = $2, town=$3
WHERE id=$1
    RETURNING id, name, town
`

type UpdateManagerParams struct {
	ID   int64  `json:"id"`
	Name string `json:"name"`
	Town string `json:"town"`
}

func (q *Queries) UpdateManager(ctx context.Context, arg UpdateManagerParams) (Manager, error) {
	row := q.db.QueryRowContext(ctx, updateManager, arg.ID, arg.Name, arg.Town)
	var i Manager
	err := row.Scan(&i.ID, &i.Name, &i.Town)
	return i, err
}
