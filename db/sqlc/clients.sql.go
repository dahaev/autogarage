// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: clients.sql

package db

import (
	"context"
)

const createClient = `-- name: CreateClient :one
INSERT INTO clients (
    name,
    country,
    phone_number
) VALUES (
             $1, $2, $3
         )
    RETURNING id, name, country, phone_number
`

type CreateClientParams struct {
	Name        string `json:"name"`
	Country     string `json:"country"`
	PhoneNumber string `json:"phone_number"`
}

func (q *Queries) CreateClient(ctx context.Context, arg CreateClientParams) (Client, error) {
	row := q.db.QueryRowContext(ctx, createClient, arg.Name, arg.Country, arg.PhoneNumber)
	var i Client
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Country,
		&i.PhoneNumber,
	)
	return i, err
}

const getClient = `-- name: GetClient :one
SELECT id, name, country, phone_number FROM clients
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetClient(ctx context.Context, id int64) (Client, error) {
	row := q.db.QueryRowContext(ctx, getClient, id)
	var i Client
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Country,
		&i.PhoneNumber,
	)
	return i, err
}

const listClients = `-- name: ListClients :many
SELECT id, name, country, phone_number FROM clients
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListClientsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListClients(ctx context.Context, arg ListClientsParams) ([]Client, error) {
	rows, err := q.db.QueryContext(ctx, listClients, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Client
	for rows.Next() {
		var i Client
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Country,
			&i.PhoneNumber,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateClient = `-- name: UpdateClient :one
UPDATE clients
set name = $2, phone_number=$3
WHERE id=$1
RETURNING id, name, country, phone_number
`

type UpdateClientParams struct {
	ID          int64  `json:"id"`
	Name        string `json:"name"`
	PhoneNumber string `json:"phone_number"`
}

func (q *Queries) UpdateClient(ctx context.Context, arg UpdateClientParams) (Client, error) {
	row := q.db.QueryRowContext(ctx, updateClient, arg.ID, arg.Name, arg.PhoneNumber)
	var i Client
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Country,
		&i.PhoneNumber,
	)
	return i, err
}
