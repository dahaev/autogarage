// Code generated by MockGen. DO NOT EDIT.
// Source: autoGarage/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	db "autoGarage/db/sqlc"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateCar mocks base method.
func (m *MockStore) CreateCar(arg0 context.Context, arg1 db.CreateCarParams) (db.Car, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCar", arg0, arg1)
	ret0, _ := ret[0].(db.Car)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCar indicates an expected call of CreateCar.
func (mr *MockStoreMockRecorder) CreateCar(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCar", reflect.TypeOf((*MockStore)(nil).CreateCar), arg0, arg1)
}

// CreateClient mocks base method.
func (m *MockStore) CreateClient(arg0 context.Context, arg1 db.CreateClientParams) (db.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClient", arg0, arg1)
	ret0, _ := ret[0].(db.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateClient indicates an expected call of CreateClient.
func (mr *MockStoreMockRecorder) CreateClient(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClient", reflect.TypeOf((*MockStore)(nil).CreateClient), arg0, arg1)
}

// CreateMagazine mocks base method.
func (m *MockStore) CreateMagazine(arg0 context.Context, arg1 string) (db.Magazine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMagazine", arg0, arg1)
	ret0, _ := ret[0].(db.Magazine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMagazine indicates an expected call of CreateMagazine.
func (mr *MockStoreMockRecorder) CreateMagazine(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMagazine", reflect.TypeOf((*MockStore)(nil).CreateMagazine), arg0, arg1)
}

// CreateManager mocks base method.
func (m *MockStore) CreateManager(arg0 context.Context, arg1 db.CreateManagerParams) (db.Manager, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateManager", arg0, arg1)
	ret0, _ := ret[0].(db.Manager)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateManager indicates an expected call of CreateManager.
func (mr *MockStoreMockRecorder) CreateManager(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateManager", reflect.TypeOf((*MockStore)(nil).CreateManager), arg0, arg1)
}

// CreateOrder mocks base method.
func (m *MockStore) CreateOrder(arg0 context.Context, arg1 db.CreateOrderParams) (db.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", arg0, arg1)
	ret0, _ := ret[0].(db.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockStoreMockRecorder) CreateOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockStore)(nil).CreateOrder), arg0, arg1)
}

// CreateOrderTx mocks base method.
func (m *MockStore) CreateOrderTx(arg0 context.Context, arg1 db.CreateOrderTxParams) (db.OrderTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrderTx", arg0, arg1)
	ret0, _ := ret[0].(db.OrderTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrderTx indicates an expected call of CreateOrderTx.
func (mr *MockStoreMockRecorder) CreateOrderTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrderTx", reflect.TypeOf((*MockStore)(nil).CreateOrderTx), arg0, arg1)
}

// GetCar mocks base method.
func (m *MockStore) GetCar(arg0 context.Context, arg1 int64) (db.Car, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCar", arg0, arg1)
	ret0, _ := ret[0].(db.Car)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCar indicates an expected call of GetCar.
func (mr *MockStoreMockRecorder) GetCar(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCar", reflect.TypeOf((*MockStore)(nil).GetCar), arg0, arg1)
}

// GetCarForUpdate mocks base method.
func (m *MockStore) GetCarForUpdate(arg0 context.Context, arg1 int64) (db.Car, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCarForUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.Car)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCarForUpdate indicates an expected call of GetCarForUpdate.
func (mr *MockStoreMockRecorder) GetCarForUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCarForUpdate", reflect.TypeOf((*MockStore)(nil).GetCarForUpdate), arg0, arg1)
}

// GetClient mocks base method.
func (m *MockStore) GetClient(arg0 context.Context, arg1 int64) (db.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClient", arg0, arg1)
	ret0, _ := ret[0].(db.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClient indicates an expected call of GetClient.
func (mr *MockStoreMockRecorder) GetClient(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClient", reflect.TypeOf((*MockStore)(nil).GetClient), arg0, arg1)
}

// GetMagazine mocks base method.
func (m *MockStore) GetMagazine(arg0 context.Context, arg1 int64) (db.Magazine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMagazine", arg0, arg1)
	ret0, _ := ret[0].(db.Magazine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMagazine indicates an expected call of GetMagazine.
func (mr *MockStoreMockRecorder) GetMagazine(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMagazine", reflect.TypeOf((*MockStore)(nil).GetMagazine), arg0, arg1)
}

// GetManager mocks base method.
func (m *MockStore) GetManager(arg0 context.Context, arg1 int64) (db.Manager, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetManager", arg0, arg1)
	ret0, _ := ret[0].(db.Manager)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetManager indicates an expected call of GetManager.
func (mr *MockStoreMockRecorder) GetManager(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetManager", reflect.TypeOf((*MockStore)(nil).GetManager), arg0, arg1)
}

// GetOrder mocks base method.
func (m *MockStore) GetOrder(arg0 context.Context, arg1 int64) (db.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrder", arg0, arg1)
	ret0, _ := ret[0].(db.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrder indicates an expected call of GetOrder.
func (mr *MockStoreMockRecorder) GetOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrder", reflect.TypeOf((*MockStore)(nil).GetOrder), arg0, arg1)
}

// ListCars mocks base method.
func (m *MockStore) ListCars(arg0 context.Context, arg1 db.ListCarsParams) ([]db.Car, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCars", arg0, arg1)
	ret0, _ := ret[0].([]db.Car)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCars indicates an expected call of ListCars.
func (mr *MockStoreMockRecorder) ListCars(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCars", reflect.TypeOf((*MockStore)(nil).ListCars), arg0, arg1)
}

// ListClients mocks base method.
func (m *MockStore) ListClients(arg0 context.Context, arg1 db.ListClientsParams) ([]db.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListClients", arg0, arg1)
	ret0, _ := ret[0].([]db.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClients indicates an expected call of ListClients.
func (mr *MockStoreMockRecorder) ListClients(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClients", reflect.TypeOf((*MockStore)(nil).ListClients), arg0, arg1)
}

// ListMagazines mocks base method.
func (m *MockStore) ListMagazines(arg0 context.Context, arg1 db.ListMagazinesParams) ([]db.Magazine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMagazines", arg0, arg1)
	ret0, _ := ret[0].([]db.Magazine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMagazines indicates an expected call of ListMagazines.
func (mr *MockStoreMockRecorder) ListMagazines(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMagazines", reflect.TypeOf((*MockStore)(nil).ListMagazines), arg0, arg1)
}

// ListManagers mocks base method.
func (m *MockStore) ListManagers(arg0 context.Context, arg1 db.ListManagersParams) ([]db.Manager, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListManagers", arg0, arg1)
	ret0, _ := ret[0].([]db.Manager)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListManagers indicates an expected call of ListManagers.
func (mr *MockStoreMockRecorder) ListManagers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListManagers", reflect.TypeOf((*MockStore)(nil).ListManagers), arg0, arg1)
}

// ListOrders mocks base method.
func (m *MockStore) ListOrders(arg0 context.Context, arg1 db.ListOrdersParams) ([]db.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrders", arg0, arg1)
	ret0, _ := ret[0].([]db.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrders indicates an expected call of ListOrders.
func (mr *MockStoreMockRecorder) ListOrders(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrders", reflect.TypeOf((*MockStore)(nil).ListOrders), arg0, arg1)
}

// UpdateCar mocks base method.
func (m *MockStore) UpdateCar(arg0 context.Context, arg1 db.UpdateCarParams) (db.Car, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCar", arg0, arg1)
	ret0, _ := ret[0].(db.Car)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCar indicates an expected call of UpdateCar.
func (mr *MockStoreMockRecorder) UpdateCar(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCar", reflect.TypeOf((*MockStore)(nil).UpdateCar), arg0, arg1)
}

// UpdateClient mocks base method.
func (m *MockStore) UpdateClient(arg0 context.Context, arg1 db.UpdateClientParams) (db.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClient", arg0, arg1)
	ret0, _ := ret[0].(db.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateClient indicates an expected call of UpdateClient.
func (mr *MockStoreMockRecorder) UpdateClient(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClient", reflect.TypeOf((*MockStore)(nil).UpdateClient), arg0, arg1)
}

// UpdateMagazine mocks base method.
func (m *MockStore) UpdateMagazine(arg0 context.Context, arg1 db.UpdateMagazineParams) (db.Magazine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMagazine", arg0, arg1)
	ret0, _ := ret[0].(db.Magazine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMagazine indicates an expected call of UpdateMagazine.
func (mr *MockStoreMockRecorder) UpdateMagazine(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMagazine", reflect.TypeOf((*MockStore)(nil).UpdateMagazine), arg0, arg1)
}

// UpdateManager mocks base method.
func (m *MockStore) UpdateManager(arg0 context.Context, arg1 db.UpdateManagerParams) (db.Manager, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateManager", arg0, arg1)
	ret0, _ := ret[0].(db.Manager)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateManager indicates an expected call of UpdateManager.
func (mr *MockStoreMockRecorder) UpdateManager(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateManager", reflect.TypeOf((*MockStore)(nil).UpdateManager), arg0, arg1)
}

// UpdateOrder mocks base method.
func (m *MockStore) UpdateOrder(arg0 context.Context, arg1 db.UpdateOrderParams) (db.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrder", arg0, arg1)
	ret0, _ := ret[0].(db.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOrder indicates an expected call of UpdateOrder.
func (mr *MockStoreMockRecorder) UpdateOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrder", reflect.TypeOf((*MockStore)(nil).UpdateOrder), arg0, arg1)
}
